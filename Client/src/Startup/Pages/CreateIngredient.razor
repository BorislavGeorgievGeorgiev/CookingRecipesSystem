@attribute [Route(PageRoutes.IngredientCreate)]

@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Http

@using CookingRecipesSystem.Startup.Models.Ingredient

@attribute [Authorize]
@inject NavigationManager Navigation
@inject IIngredientService IngredientService

<h1 class="h2 font-weight-normal login-title">
  Create Ingredient
</h1>
<br />

<EditForm class="form-signin" OnValidSubmit="OnValidSubmit" Model="Ingredient">
  <DataAnnotationsValidator />

  <ValidationMessage For="@(() => Ingredient.Name)" />
  <div class="input-group mb-3">
    <div class="input-group-prepend">
      <label for="inputName" class="input-group-text">@nameof(Ingredient.Name)</label>
    </div>
    <InputText id="inputName" class="form-control" placeholder="@nameof(Ingredient.Name)" autofocus @bind-Value="@Ingredient.Name" />
  </div>

  <ValidationMessage For="@(() => Ingredient.Description)" />
  <div class="input-group mb-3">
    <div class="input-group-prepend">
      <label for="inputDescription" class="input-group-text">@nameof(Ingredient.Description)</label>
    </div>
    <InputTextArea id="inputDescription" class="form-control" placeholder="@nameof(Ingredient.Description)" @bind-Value="@Ingredient.Description" />
  </div>

  <ValidationMessage For="@(() => Ingredient.Photo)" />
  <div class="input-group mb-3">
    <div class="input-group-prepend">
      <label for="inputPhoto" class="input-group-text">@nameof(Ingredient.Photo)</label>
    </div>
    <InputFile id="inputPhoto" OnChange="@GetFile" class="form-control" placeholder="@nameof(Ingredient.Photo)" accept=".jpg, .jpeg" />
  </div>

  <div>
    @foreach (var error in Errors)
    {
      <label class="text-danger">@error</label>
    }
  </div>
  <div>
    <button class="btn btn-lg btn-primary btn-block" type="submit">Create</button>
  </div>
</EditForm>

@code {
  IngredientPostModel Ingredient { get; set; } = new IngredientPostModel();

  IEnumerable<string> Errors = new List<string>();

  private Task GetFile(InputFileChangeEventArgs e)
  {
    Ingredient.Photo = e.File;

    return Task.CompletedTask;
  }

  async Task OnValidSubmit(EditContext editContext)
  {
    var result = await IngredientService.Create(Ingredient);

    if (result.Succeeded)
    {
      Navigation.NavigateTo(@PageRoutes.IngredientGetById + result.Response.Id);
    }

    Errors = result.Errors;
  }
}
