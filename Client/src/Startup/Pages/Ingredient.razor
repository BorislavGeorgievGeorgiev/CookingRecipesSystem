@attribute [Route(PageRoutes.IngredientGetById + PageRoutes.Id)]

@using CookingRecipesSystem.Startup.Models.Ingredient
@using CookingRecipesSystem.Startup.Models.Photo

@inject IIngredientService IngredientService

<h3>Ingredient</h3>

@if(succeeded){
<div class="card card-size text-white bg-info mb-3">
  <img src="@IngredientModel.Photo.CardPhoto" class="card-img-top" alt="...">
  <div class="card-body">
    <h5 class="card-title">@IngredientModel.Name</h5>
    <p class="card-text">@IngredientModel.Description</p>
    <a href="#" class="btn btn-primary">Go somewhere</a>
  </div>
</div>
}

<div>
  @foreach (var error in Errors)
  {
    <label class="text-danger">@error</label>
  }
</div>

@code {
  private bool succeeded = false;

  private IEnumerable<string> Errors { get; set; } = new List<string>();

  [Parameter]
  public int? Id { get; set; }  

  public IngredientGetModel IngredientModel { get; set; } = new IngredientGetModel
    {
      Name = string.Empty,
      Description = string.Empty,
      Photo = new PhotoGetModel
      {
        MainPhoto = string.Empty,
        CardPhoto = string.Empty,
        Thumbnail = string.Empty
      }
    };

  protected async override Task OnParametersSetAsync()
  {
    await base.OnParametersSetAsync();

    var result = await IngredientService.GetById(Id.Value);

    if (result.Succeeded)
    {
      succeeded = true;
      IngredientModel = result.Response;
    }
    
    Errors = result.Errors;
  }
}
