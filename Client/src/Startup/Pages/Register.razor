@page "/authentication/register"

@inject NavigationManager navigationManager
@inject IAuthService AuthService

<h1 class="h2 font-weight-normal login-title">
  Register
</h1>

<EditForm class="form-signin" OnValidSubmit="OnSubmit" Model="registerRequest">
  <DataAnnotationsValidator />

  <label for="inputUsername" class="sr-only">User Name</label>
  <InputText id="inputUsername" class="form-control" placeholder="Username" autofocus @bind-Value="@registerRequest.UserName" />
  <ValidationMessage For="@(() => registerRequest.UserName)" />

  <label for="inputEmail" class="sr-only">Email</label>
  <InputText id="inputEmail" class="form-control" placeholder="Email" autofocus @bind-Value="@registerRequest.Email" />
  <ValidationMessage For="@(() => registerRequest.Email)" />

  <label for="inputPassword" class="sr-only">Password</label>
  <InputText type="password" id="inputPassword" class="form-control" placeholder="Password" @bind-Value="@registerRequest.Password" />
  <ValidationMessage For="@(() => registerRequest.Password)" />

  <label for="inputPasswordConfirm" class="sr-only">Password Confirmation</label>
  <InputText type="password" id="inputPasswordConfirm" class="form-control" placeholder="Password Confirmation" @bind-Value="@registerRequest.PasswordConfirm" />
  <ValidationMessage For="@(() => registerRequest.PasswordConfirm)" />

  <div>
     @foreach (var error in Errors)
     {
       <label class="text-danger">@error</label> 
     }    
  </div>

  <button class="btn btn-lg btn-primary btn-block" type="submit">Create account</button>
  
</EditForm>

@code{

    UserRegisterModel registerRequest { get; set; } = new UserRegisterModel();

    IEnumerable<string> Errors { get; set; } = new List<string>();

    async Task OnSubmit()
    {       
       var result = await AuthService.Register(registerRequest);
       
       if (result.Succeeded)
       {
         navigationManager.NavigateTo("");
       }       
       
       Errors = result.Errors;
    }
}