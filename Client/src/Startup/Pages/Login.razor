@page "/authentication/login"

@inject NavigationManager Navigation
@inject IAuthService AuthService

<h1 class="h2 font-weight-normal login-title">
  Login
</h1>

<EditForm class="form-signin" OnValidSubmit="OnSubmit" Model="loginRequest">
  <DataAnnotationsValidator />

  <label for="inputEmail" class="sr-only">@AppConstants.EmailDisplay</label>
  <InputText id="inputEmail" class="form-control" placeholder="@AppConstants.EmailDisplay" autofocus @bind-Value="@loginRequest.Email" />
  <ValidationMessage For="@(() => loginRequest.Email)" />

  <label for="inputPassword" class="sr-only">@AppConstants.PasswordDisplay</label>
  <InputText type="password" id="inputPassword" class="form-control" placeholder="@AppConstants.PasswordDisplay" @bind-Value="loginRequest.Password" />
  <ValidationMessage For="@(() => loginRequest.Password)" />

  <div>
    @foreach (var error in Errors)
    {
      <label class="text-danger">@error</label>
    }
  </div>
  <div>
    <button class="btn btn-lg btn-primary btn-block" type="submit">Sign in</button>
  </div>
</EditForm>

@code {
  [Parameter]
  [SupplyParameterFromQuery]
  public string? ReturnUrl { get; set; }

  [Parameter]
  [SupplyParameterFromQuery]
  public string? Error { get; set; }

  UserLoginModel loginRequest { get; set; } = new UserLoginModel();

  IEnumerable<string> Errors { get; set; } = new List<string>();

  async Task OnSubmit()
  {
    var result = await AuthService.Login(loginRequest);
    var escapedUri = string.Empty;

    if (result.Succeeded)
    {    
      ReturnUrl ??= string.Empty;
      escapedUri = Uri.EscapeDataString(ReturnUrl);
      Navigation.NavigateTo(Uri.UnescapeDataString(escapedUri), forceLoad: true, replace: true);
    }
    else
    {
      var queryChar = ReturnUrl != null ? "&" : "?";
      escapedUri = Uri.EscapeDataString(Navigation.Uri) 
      + queryChar + nameof(Error) + "=" + result.Errors.FirstOrDefault();

      Navigation.NavigateTo(Uri.UnescapeDataString(escapedUri), forceLoad: true, replace: true);
    }
  }

  protected override void OnInitialized()
  {
    Error ??= string.Empty;
    Errors = new string[] { Error };
  }
}