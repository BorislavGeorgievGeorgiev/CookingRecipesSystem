@page "/authentication/login"

@inject NavigationManager Navigation
@inject IAuthService AuthService

<h1 class="h2 font-weight-normal login-title">
  Login
</h1>

<EditForm class="form-signin" OnValidSubmit="OnSubmit" Model="loginRequest">
  <DataAnnotationsValidator />

  <label for="inputEmail" class="sr-only">@nameof(loginRequest.Email)</label>
  <InputText id="inputEmail" class="form-control" placeholder="@nameof(loginRequest.Email)" autofocus @bind-Value="@loginRequest.Email" />
  <ValidationMessage For="@(() => loginRequest.Email)" />

  <label for="inputPassword" class="sr-only">@nameof(loginRequest.Password)</label>
  <InputText type="password" id="inputPassword" class="form-control" placeholder="@nameof(loginRequest.Password)" @bind-Value="loginRequest.Password" />
  <ValidationMessage For="@(() => loginRequest.Password)" />

  <div>
    @foreach (var error in Errors)
    {
      <label class="text-danger">@error</label>
    }
  </div>
  <div>
    <button class="btn btn-lg btn-primary btn-block" type="submit">Sign in</button>
  </div>
</EditForm>

@code {
  [Parameter]
  [SupplyParameterFromQuery]
  public string? ReturnUrl { get; set; }

  UserLoginModel loginRequest { get; set; } = new UserLoginModel();

  IEnumerable<string> Errors { get; set; } = new List<string>();

  async Task OnSubmit()
  {
    var result = await AuthService.Login(loginRequest);

    if (result.Succeeded)
    {
      ReturnUrl ??= "";
      Navigation.NavigateTo(ReturnUrl, forceLoad: true, replace: true);
    }
    else
    {
      //TODO: Show the Errors !
      Errors = result.Errors;
      Navigation.NavigateTo(Navigation.Uri, forceLoad: true, replace: true);
    }
  }
}